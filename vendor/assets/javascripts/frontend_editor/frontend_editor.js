// Generated by CoffeeScript 1.7.1
(function() {
  var _base, _base1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (_base = FrontendEditor.Collections).InlineEditor || (_base.InlineEditor = {});

  FrontendEditor.Collections.InlineEditor.Items = (function(_super) {
    __extends(Items, _super);

    function Items() {
      return Items.__super__.constructor.apply(this, arguments);
    }

    Items.prototype.model = FrontendEditor.Collections.InlineEditor.Item;

    Items.prototype.save = function() {
      return this.each(function(model) {
        return model.save();
      });
    };

    return Items;

  })(Backbone.Collection);

  window.FrontendEditor = {
    Models: {},
    Collections: {},
    Views: {},
    Routers: {},
    init: function() {
      var view;
      view = new FrontendEditor.Views.InlineEditor.ToolbarView();
      $('body').prepend(view.render().el);
      return this.currentModels = new FrontendEditor.Collections.InlineEditor.Items();
    },
    getCurrentModel: function(modelName) {
      var currentModel;
      currentModel = this.currentModels[modelName];
      if (currentModel === void 0) {
        currentModel = new this.Models.Item(modelName);
        this.currentModels.add(currentModel);
      }
      return currentModel;
    }
  };

  FrontendEditor.Models.Item = (function(_super) {
    __extends(Item, _super);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.initialize = function(plural) {
      return this.urlRoot = "/" + plural;
    };

    return Item;

  })(Backbone.Model);

  (_base1 = FrontendEditor.Views).InlineEditor || (_base1.InlineEditor = {});

  FrontendEditor.Views.InlineEditor.ToolbarView = (function(_super) {
    __extends(ToolbarView, _super);

    function ToolbarView() {
      return ToolbarView.__super__.constructor.apply(this, arguments);
    }

    ToolbarView.prototype.template = JST['frontend_editor/templates/toolbar_views'];

    ToolbarView.prototype.events = {
      'click .editing-mode': 'toggleEditingMode',
      'click .save': 'saveChanges',
      'click .cancel': 'cancelChanges'
    };

    ToolbarView.prototype.render = function() {
      ToolbarView.__super__.render.apply(this, arguments);
      if ($('#frontend_toolbar').length !== 0) {
        $(this.el).html($('#frontend_toolbar').html());
      } else {
        $(this.el).html(this.template());
      }
      this.$('.save').hide();
      this.$('.cancel').hide();
      return this;
    };

    ToolbarView.prototype.saveChanges = function(event) {
      Editor.commitAll();
      FrontendEditor.currentModels.save();
      FrontendEditor.currentModels.reset();
      alert("Enregistrement Effectu√©");
      return this.toggleEditingMode();
    };

    ToolbarView.prototype.cancelChanges = function(event) {
      return window.location.reload();
    };

    ToolbarView.prototype.toggleEditingMode = function() {
      if ($('.save').is(':hidden')) {
        this.$('.save').show();
        this.$('.cancel').show();
        return Editor.active();
      } else {
        this.$('.save').hide();
        this.$('.cancel').hide();
        return Editor.deactive();
      }
    };

    return ToolbarView;

  })(Backbone.View);

}).call(this);
